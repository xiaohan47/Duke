
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <exception>
#include <fstream>
#include <iostream>
#include <vector>

using namespace std;

class page {
 private:
  bool win;
  bool lose;
  int page_num;
  class choice_info;
  vector<choice_info> choice;
  int num_choice;
  string context;

  class choice_info {
   public:
    page * next;
    int next_pnum;
    string choice_context;
    choice_info() : next(NULL), next_pnum(0){};
    choice_info(int num) : next(NULL), next_pnum(num){};
    ~choice_info(){};
  };

 public:
  page() : win(false), lose(false), page_num(0), num_choice(0){};

  void parse_page(char * file_name) {
    ifstream file(file_name);
    if (!file) {
      cerr << "The file cannot open.\n";
      exit(EXIT_FAILURE);
    }
    string line;
    vector<string> line_vec;
    while (getline(file, line)) {
      if (line == "") {
        cerr << "The page is empty.\n";
        exit(EXIT_FAILURE);
      }
      line_vec.push_back(line);
    }
    add_page(line_vec);
  };

  void add_page(vector<string> line_vec) {
    //It should at least have two line
    int len = line_vec.size();
    if (len <= 1) {
      cerr << "The page not format correctly: short of lines.\n";
      exit(EXIT_FAILURE);
    }

    // if the first line is "WIN"
    if (line_vec[0] == "WIN") {
      //check if the second line is the seperator "#"
      if (line_vec[1][0] == '#') {
        win = true;
        for (int i = 2; i < len; i++) {
          context.append(line_vec[i]);
        }
      }
      else {
        cerr << "The page not format correctly: no # after WIN.\n";
        exit(EXIT_FAILURE);
      }
    }

    //if the first line is "LOSE"
    if (line_vec[0] == "LOSE") {
      //check if the second line is the seperator "#"
      if (line_vec[1][0] == '#') {
        lose = true;
        for (int i = 2; i < len; i++) {
          context.append(line_vec[i]);
        }
      }
      else {
        cerr << "The page not format correctly: no # after LOSE.\n";
        exit(EXIT_FAILURE);
      }
    }

    //if the first line is choice
    else if (line_vec[0][0] >= '1' && line_vec[0][0] <= '9') {
      int i = 0;
      num_choice = 0;

      while (line_vec[i][0] != '#') {
        size_t col_index = line_vec[i].find(':');

        // if there is no ':'
        if (col_index == line_vec[i].npos) {
          cerr << "The page not format correctly: no : find.\n";
          exit(EXIT_FAILURE);
        }

        string num_str;
        for (size_t j = 0; j < col_index; j++) {
          if (line_vec[i][j] > '9' && line_vec[i][j] < '0') {
            cerr << "The page not format correctly: the choice is not a valid integer.\n";
            exit(EXIT_FAILURE);
          }
          num_str.append(&line_vec[i][j]);
        }

        int num = atoi(num_str.c_str());

        //create new choice_info type.
        choice_info new_choice(num);
        size_t k = col_index + 1;
        size_t leng_line = line_vec[i].size();
        new_choice.choice_context[leng_line];
        while (line_vec[i][k] != '\n') {
          new_choice.choice_context.push_back(line_vec[i][k]);
          k++;
        }
        new_choice.choice_context.push_back('\n');
        choice.push_back(new_choice);
        num_choice++;
        i++;
      }
      for (int m = i + 1; m < len; m++) {
        context.append(line_vec[m]);
      }
    }
  }

  void print_page() {
    cout << context << endl;
    cout << '\n';
    if (win == true) {
      cout << "Congratulations! You have won. Hooray!" << endl;
    }
    if (lose == true) {
      cout << "Sorry, you have lost. Better luck next time!" << endl;
    }
    if (win == false && lose == false && num_choice != 0) {
      cout << "What would you like to do?" << endl;
      cout << '\n';
      for (int i = 1; i <= num_choice; i++) {
        cout << i << ". " << choice[i - 1].choice_context << endl;
      }
    }
  }

  ~page() {}
};
